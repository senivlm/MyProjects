	Я зробив для класу Storage дженерік інтерфейс IStorage. Дженерік інтерфейс зроблений для того,
щоб можливо було скористатись поліморфізмом, маючи різні типи складів, вказавши тільки тип товару, який збергіється.
Storage - це дженерік клас теж, але тип мусить бути обов'язково, який наслідує Product(продуктом може бути наприклад
автомобіль чи комп'ютер, адже абстрактний клас продукт має 3 атрибута, які мають всі товари). 

Також клас Storage реалізує IEnumerable для зручного перегляду товарів(товари клонуються при повернені).//Останню фразу хотіла б, щоб пояснили
Для Storage задекларував івент, який сповіщає про наявність нового продукту за критеріями імені
та типу класа.//дуже добре!
	Оскільки кожен клас має мати свою особисту відповілальність(один із принципів солід) - розділив
 клас "читач продуктів" і клас "порівняння storages" в інші класи розширення для зручності та читаємості.
В подальшому в цих класах розширення незалежно від основного класу можливо буде змінити логіку.
(Таким чином було зроблено і для колекцій розширення LINQ. Але на мою думку краще розширеннями користуватись обмежено
і створювати повноцінні класи.)
	Зробив для продуктів загальний абстрактний клас(абстрактний, тому що потрібне використання полів)
продукт, який має загальні властивості продукту, а також абстракний метод Clone, - задля використання поліморфізму та абстракції.
Також створив інтерфейс IExpirableProduct через те, що в деяких продуктах має бутим властивість терміну придатності.
